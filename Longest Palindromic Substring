##O(N^2) with python
#dp 
#if table[i+1][j-1] & str[i]==str[j] : table[i][j] = True    deal with the substring str[i:j]
#start with table[i][i]=True (for odd palindromic) table[i][i+1]=True if str[i] = str[i+1]  (for even palindromic)
#then for len(substring)=3:n using dp
##python code
def longest_subpalindrome_slice(text):
    "Return (i, j) such that text[i:j] is the longest palindrome in text."
    # Your code here
    n=len(text)
    table=[[False for i in range(n)] for j in range(n)]
    for i in range(n):
        table[i][i]=True
    for i in range(n-1):
        if text[i]==text[i+1]:
           table[i][i+1]==True
           start = i
           end = i+1
           maxlen = 2
    for diff in range(3,n+1):
        for i in range(n-diff+1):
            j=i+diff-1
            #print i,j,diff
            if text[i]==text[j] and table[i+1][j-1]:
               table[i][j]=True
               start = i
               end = j
               maxlen = diff
            #print table[i][j]
    return start,end
